<html>
<head>
<title>Highcharts Tutorial</title>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
   <script src="https://code.highcharts.com/highcharts.js"></script>
</head>
<body>
<div> <input id="btn_csv" type="button" value="Download data" /> </div>

<script language="JavaScript">

	arrayString = new Array();
	arrVal			= new Array();
	array_final		= [];
	array_geo 		= new Array();
	array_num 		= new Array();
	var geoValue;

	array_asylum1 	= new Array();
	array_asylum2 	= new Array();
	array_asylum3	= new Array();

	array_asylumId = new Array();
	array_asylumVal = new Array();

	array_countryLabel1 	= new Array();
	array_countryLabel2 	= new Array();
	array_countryLabel3	= new Array();

	array_countryLabelId = new Array();
	array_countryLabelVal = new Array();

	array_asylumApp = [];
	var uamData = {};
	var temp = {};
	asylum_finalArray = new Array();
	country_finalArray = new Array();
	array_temp = new Array();


/* All Eurostat dataset names are in the text file; Eurostat_dataset_list.txt - check the dataset name to use for the API.

*/

$(function() {
	var year = '2018';
	//var url = "http://ec.europa.eu/eurostat/wdds/rest/data/v2.1/json/en/migr_asyappctzm?citizen=AF&precision=1&sex=T&asyl_app=NASY_APP&unit=PER&age=TOTAL"
	var url = "http://ec.europa.eu/eurostat/wdds/rest/data/v2.1/json/en/migr_asyunaa?citizen=AF&sex=T&precision=1&time="+year+"&age=TOTAL";
	alert(url);
	
	$('#btn_csv').click(function() 
	{
		$.getJSON(url, function(data)
		{
			// get name of the Dataset or main label
			datasetLabel = data.label;
			source = data.source;
			updated  = data.updated;
			subTitle = "Source: " + source + ",  Last Updated: " + updated;

			// array for asylum applications values
			array_asylum1 = data.value;
			temp = array_asylum1;
			array_asylum2.push(JSON.stringify(array_asylum1));
			array_asylum3 = JSON.parse(array_asylum2);

			$.each(array_asylum3, function(k, v) {
				array_asylumApp.push(k);	// country Ids against which actual number of asylum applications are listed in the data.value
				array_asylumVal.push(v);	// actual number of asylum applications for each country in EU

	    	});

			// array for geo category
			array_final = data.dimension.geo.category.index;
			arrayString.push(JSON.stringify(array_final));
			arrVal = JSON.parse(arrayString);

			// populate array for geo (country of asylum) and # of applications
			$.each(arrVal, function(key, value) {
				array_geo.push(key);	// ISO2 country codes
				array_num.push(value);	// country Ids against which actual number of asylum applications are listed in the data.value
	    	});

	    	// array for country/geo label
			array_countryLabel1 = data.dimension.geo.category.label;
			array_countryLabel2.push(JSON.stringify(array_countryLabel1));
			array_countryLabel3 = JSON.parse(array_countryLabel2);

			// populate array for geo (country of asylum) and # of applications
			$.each(array_countryLabel3, function(a, b) {
				array_countryLabelId.push(a);	// ISO2 country codes
				array_countryLabelVal.push(b);	// Full name of each country cuntry of Asylum in the EU

	    	});

			// use array array_asylumVal and array_countryLabelVal to concatenae their values;

			 for (var i = 0; i < array_asylumVal.length; i++)
			 {

			 	if (array_countryLabelVal[i] != "Total")
			 	{
			 		array_temp.push(array_asylumVal[i] + "|" + array_countryLabelVal[i]);
			 	}
			 }

			sortedarray = array_temp.sort(sortNumber2)




			var mySplitResult;
			// Use the string.split function to split the string
			// using empty quotation marks as a criteria for splitting the string

			for(k = 0; k < sortedarray.length; k++)
			{
				mySplitResult = sortedarray[k];
				var j = mySplitResult.indexOf('|');
				var partOne = mySplitResult.slice(0, j);
				var partTwo = mySplitResult.slice(j + 1, mySplitResult.length);
				asylum_finalArray.push(parseFloat(partOne));
				country_finalArray.push(partTwo);
			}

			function sortNumber2(a, b) {
				var ax = [], bx = [];
				a.replace(/(\d+)|(\D+)/g, function(_, $1, $2) { ax.push([$1 || Infinity, $2 || ""]) });
				b.replace(/(\d+)|(\D+)/g, function(_, $1, $2) { bx.push([$1 || Infinity, $2 || ""]) });

				while(ax.length && bx.length) {
				var an = ax.shift();
				var bn = bx.shift();
				var nn = (bn[0] - an[0]) || an[1].localeCompare(bn[1]);
				if(nn) return nn;
				}

				return  bx.length - ax.length;
			}


			
		/* write results to csv */
			var csv = 'Name,Title,Year\n';
			for (var i = 0; i < country_finalArray.length; i++){
				csv += country_finalArray[i] + ','+ asylum_finalArray[i]+','+year;
				csv += "\n";
				//alert(csv);
			}
			console.log(csv);
			var hiddenElement = document.createElement('a');
			hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
			hiddenElement.target = '_blank';
			hiddenElement.download = 'people.csv';
			hiddenElement.click();
		/* csv end file */

		});
	});
});
</script>
</body>
</html>